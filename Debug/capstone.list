
capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002494  08000250  08000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080026e4  080026e4  000036e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080027b4  080027b4  000037b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080027b8  080027b8  000037b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000009  20000000  080027bc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  2000000c  080027c5  0000400c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000002c  080027c5  0000402c  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00004009  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007c87  00000000  00000000  0000403f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000016a0  00000000  00000000  0000bcc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000898  00000000  00000000  0000d368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000654  00000000  00000000  0000dc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00033532  00000000  00000000  0000e254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000083dc  00000000  00000000  00041786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013f609  00000000  00000000  00049b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0018916b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002148  00000000  00000000  001891b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000004d  00000000  00000000  0018b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000000c 	.word	0x2000000c
 800026c:	00000000 	.word	0x00000000
 8000270:	080026cc 	.word	0x080026cc

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000010 	.word	0x20000010
 800028c:	080026cc 	.word	0x080026cc

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f000 f9d8 	bl	8000648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f812 	bl	80002c0 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800029c:	f000 f85a 	bl	8000354 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a0:	f000 f882 	bl	80003a8 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80002a4:	f000 f86d 	bl	8000382 <MX_ICACHE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80002a8:	2104      	movs	r1, #4
 80002aa:	4804      	ldr	r0, [pc, #16]	@ (80002bc <main+0x2c>)
 80002ac:	f000 fe0e 	bl	8000ecc <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80002b0:	2064      	movs	r0, #100	@ 0x64
 80002b2:	f000 fa8f 	bl	80007d4 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80002b6:	bf00      	nop
 80002b8:	e7f6      	b.n	80002a8 <main+0x18>
 80002ba:	bf00      	nop
 80002bc:	42021800 	.word	0x42021800

080002c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b09e      	sub	sp, #120	@ 0x78
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	f107 0318 	add.w	r3, r7, #24
 80002ca:	2260      	movs	r2, #96	@ 0x60
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f002 f9d0 	bl	8002674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d4:	463b      	mov	r3, r7
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]
 80002e2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 80002e4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80002e8:	f000 feb8 	bl	800105c <HAL_PWREx_ControlVoltageScaling>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80002f2:	f000 f8f7 	bl	80004e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002f6:	2310      	movs	r3, #16
 80002f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002fa:	2301      	movs	r3, #1
 80002fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002fe:	2310      	movs	r3, #16
 8000300:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000302:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000306:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000308:	2300      	movs	r3, #0
 800030a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030c:	f107 0318 	add.w	r3, r7, #24
 8000310:	4618      	mov	r0, r3
 8000312:	f000 ff3f 	bl	8001194 <HAL_RCC_OscConfig>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0x60>
  {
    Error_Handler();
 800031c:	f000 f8e2 	bl	80004e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000320:	231f      	movs	r3, #31
 8000322:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000324:	2300      	movs	r3, #0
 8000326:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000338:	463b      	mov	r3, r7
 800033a:	2100      	movs	r1, #0
 800033c:	4618      	mov	r0, r3
 800033e:	f001 fe05 	bl	8001f4c <HAL_RCC_ClockConfig>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000348:	f000 f8cc 	bl	80004e4 <Error_Handler>
  }
}
 800034c:	bf00      	nop
 800034e:	3778      	adds	r7, #120	@ 0x78
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}

08000354 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800035a:	f000 ff0b 	bl	8001174 <HAL_PWREx_EnableVddIO2>

  PWR_PVDTypeDef sConfigPVD = {0};
 800035e:	463b      	mov	r3, r7
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]

  /*
   * PVD Configuration
   */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000366:	2300      	movs	r3, #0
 8000368:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 800036a:	2300      	movs	r3, #0
 800036c:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 800036e:	463b      	mov	r3, r7
 8000370:	4618      	mov	r0, r3
 8000372:	f000 fdf5 	bl	8000f60 <HAL_PWR_ConfigPVD>

  /*
   * Enable the PVD Output
   */
  HAL_PWR_EnablePVD();
 8000376:	f000 fe61 	bl	800103c <HAL_PWR_EnablePVD>
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800037a:	bf00      	nop
 800037c:	3708      	adds	r7, #8
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}

08000382 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000382:	b580      	push	{r7, lr}
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000386:	2000      	movs	r0, #0
 8000388:	f000 fdba 	bl	8000f00 <HAL_ICACHE_ConfigAssociativityMode>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000392:	f000 f8a7 	bl	80004e4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000396:	f000 fdd3 	bl	8000f40 <HAL_ICACHE_Enable>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80003a0:	f000 f8a0 	bl	80004e4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b08a      	sub	sp, #40	@ 0x28
 80003ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	f107 0314 	add.w	r3, r7, #20
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
 80003bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003be:	4b44      	ldr	r3, [pc, #272]	@ (80004d0 <MX_GPIO_Init+0x128>)
 80003c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003c4:	4a42      	ldr	r2, [pc, #264]	@ (80004d0 <MX_GPIO_Init+0x128>)
 80003c6:	f043 0301 	orr.w	r3, r3, #1
 80003ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80003ce:	4b40      	ldr	r3, [pc, #256]	@ (80004d0 <MX_GPIO_Init+0x128>)
 80003d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003d4:	f003 0301 	and.w	r3, r3, #1
 80003d8:	613b      	str	r3, [r7, #16]
 80003da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80003dc:	4b3c      	ldr	r3, [pc, #240]	@ (80004d0 <MX_GPIO_Init+0x128>)
 80003de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003e2:	4a3b      	ldr	r2, [pc, #236]	@ (80004d0 <MX_GPIO_Init+0x128>)
 80003e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80003ec:	4b38      	ldr	r3, [pc, #224]	@ (80004d0 <MX_GPIO_Init+0x128>)
 80003ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fa:	4b35      	ldr	r3, [pc, #212]	@ (80004d0 <MX_GPIO_Init+0x128>)
 80003fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000400:	4a33      	ldr	r2, [pc, #204]	@ (80004d0 <MX_GPIO_Init+0x128>)
 8000402:	f043 0304 	orr.w	r3, r3, #4
 8000406:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800040a:	4b31      	ldr	r3, [pc, #196]	@ (80004d0 <MX_GPIO_Init+0x128>)
 800040c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000418:	4b2d      	ldr	r3, [pc, #180]	@ (80004d0 <MX_GPIO_Init+0x128>)
 800041a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800041e:	4a2c      	ldr	r2, [pc, #176]	@ (80004d0 <MX_GPIO_Init+0x128>)
 8000420:	f043 0302 	orr.w	r3, r3, #2
 8000424:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000428:	4b29      	ldr	r3, [pc, #164]	@ (80004d0 <MX_GPIO_Init+0x128>)
 800042a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800042e:	f003 0302 	and.w	r3, r3, #2
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	2104      	movs	r1, #4
 800043a:	4826      	ldr	r0, [pc, #152]	@ (80004d4 <MX_GPIO_Init+0x12c>)
 800043c:	f000 fd2e 	bl	8000e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	2180      	movs	r1, #128	@ 0x80
 8000444:	4824      	ldr	r0, [pc, #144]	@ (80004d8 <MX_GPIO_Init+0x130>)
 8000446:	f000 fd29 	bl	8000e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2180      	movs	r1, #128	@ 0x80
 800044e:	4823      	ldr	r0, [pc, #140]	@ (80004dc <MX_GPIO_Init+0x134>)
 8000450:	f000 fd24 	bl	8000e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATWIN_SCK_Pin ATWIN_MISO_Pin ATWIN_MOSI_Pin */
  GPIO_InitStruct.Pin = ATWIN_SCK_Pin|ATWIN_MISO_Pin|ATWIN_MOSI_Pin;
 8000454:	23e0      	movs	r3, #224	@ 0xe0
 8000456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000458:	2302      	movs	r3, #2
 800045a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	2300      	movs	r3, #0
 800045e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000460:	2300      	movs	r3, #0
 8000462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000464:	2305      	movs	r3, #5
 8000466:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	4619      	mov	r1, r3
 800046e:	481c      	ldr	r0, [pc, #112]	@ (80004e0 <MX_GPIO_Init+0x138>)
 8000470:	f000 fb3c 	bl	8000aec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000474:	2304      	movs	r3, #4
 8000476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000478:	2301      	movs	r3, #1
 800047a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	2300      	movs	r3, #0
 800047e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000480:	2300      	movs	r3, #0
 8000482:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000484:	f107 0314 	add.w	r3, r7, #20
 8000488:	4619      	mov	r1, r3
 800048a:	4812      	ldr	r0, [pc, #72]	@ (80004d4 <MX_GPIO_Init+0x12c>)
 800048c:	f000 fb2e 	bl	8000aec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000490:	2380      	movs	r3, #128	@ 0x80
 8000492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000494:	2301      	movs	r3, #1
 8000496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049c:	2300      	movs	r3, #0
 800049e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80004a0:	f107 0314 	add.w	r3, r7, #20
 80004a4:	4619      	mov	r1, r3
 80004a6:	480c      	ldr	r0, [pc, #48]	@ (80004d8 <MX_GPIO_Init+0x130>)
 80004a8:	f000 fb20 	bl	8000aec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 80004ac:	2380      	movs	r3, #128	@ 0x80
 80004ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b0:	2301      	movs	r3, #1
 80004b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b8:	2300      	movs	r3, #0
 80004ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	4619      	mov	r1, r3
 80004c2:	4806      	ldr	r0, [pc, #24]	@ (80004dc <MX_GPIO_Init+0x134>)
 80004c4:	f000 fb12 	bl	8000aec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004c8:	bf00      	nop
 80004ca:	3728      	adds	r7, #40	@ 0x28
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	46020c00 	.word	0x46020c00
 80004d4:	42021800 	.word	0x42021800
 80004d8:	42020800 	.word	0x42020800
 80004dc:	42020400 	.word	0x42020400
 80004e0:	42020000 	.word	0x42020000

080004e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e8:	b672      	cpsid	i
}
 80004ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <Error_Handler+0x8>

080004f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80004f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000520 <HAL_MspInit+0x30>)
 80004f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80004fc:	4a08      	ldr	r2, [pc, #32]	@ (8000520 <HAL_MspInit+0x30>)
 80004fe:	f043 0304 	orr.w	r3, r3, #4
 8000502:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000506:	4b06      	ldr	r3, [pc, #24]	@ (8000520 <HAL_MspInit+0x30>)
 8000508:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800050c:	f003 0304 	and.w	r3, r3, #4
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	46020c00 	.word	0x46020c00

08000524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <NMI_Handler+0x4>

0800052c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <HardFault_Handler+0x4>

08000534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <MemManage_Handler+0x4>

0800053c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <BusFault_Handler+0x4>

08000544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <UsageFault_Handler+0x4>

0800054c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800057a:	f000 f90b 	bl	8000794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000588:	4b18      	ldr	r3, [pc, #96]	@ (80005ec <SystemInit+0x68>)
 800058a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800058e:	4a17      	ldr	r2, [pc, #92]	@ (80005ec <SystemInit+0x68>)
 8000590:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000594:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000598:	4b15      	ldr	r3, [pc, #84]	@ (80005f0 <SystemInit+0x6c>)
 800059a:	2201      	movs	r2, #1
 800059c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800059e:	4b14      	ldr	r3, [pc, #80]	@ (80005f0 <SystemInit+0x6c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80005a4:	4b12      	ldr	r3, [pc, #72]	@ (80005f0 <SystemInit+0x6c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80005aa:	4b11      	ldr	r3, [pc, #68]	@ (80005f0 <SystemInit+0x6c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80005b0:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <SystemInit+0x6c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a0e      	ldr	r2, [pc, #56]	@ (80005f0 <SystemInit+0x6c>)
 80005b6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80005ba:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80005be:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80005c0:	4b0b      	ldr	r3, [pc, #44]	@ (80005f0 <SystemInit+0x6c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80005c6:	4b0a      	ldr	r3, [pc, #40]	@ (80005f0 <SystemInit+0x6c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a09      	ldr	r2, [pc, #36]	@ (80005f0 <SystemInit+0x6c>)
 80005cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80005d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80005d2:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <SystemInit+0x6c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005d8:	4b04      	ldr	r3, [pc, #16]	@ (80005ec <SystemInit+0x68>)
 80005da:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80005de:	609a      	str	r2, [r3, #8]
  #endif
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	e000ed00 	.word	0xe000ed00
 80005f0:	46020c00 	.word	0x46020c00

080005f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80005f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800062c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f8:	f7ff ffc4 	bl	8000584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005fe:	e003      	b.n	8000608 <LoopCopyDataInit>

08000600 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000600:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000602:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000604:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000606:	3104      	adds	r1, #4

08000608 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000608:	480a      	ldr	r0, [pc, #40]	@ (8000634 <LoopForever+0xa>)
	ldr	r3, =_edata
 800060a:	4b0b      	ldr	r3, [pc, #44]	@ (8000638 <LoopForever+0xe>)
	adds	r2, r0, r1
 800060c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800060e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000610:	d3f6      	bcc.n	8000600 <CopyDataInit>
	ldr	r2, =_sbss
 8000612:	4a0a      	ldr	r2, [pc, #40]	@ (800063c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000614:	e002      	b.n	800061c <LoopFillZerobss>

08000616 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000616:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000618:	f842 3b04 	str.w	r3, [r2], #4

0800061c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800061c:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <LoopForever+0x16>)
	cmp	r2, r3
 800061e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000620:	d3f9      	bcc.n	8000616 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000622:	f002 f82f 	bl	8002684 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000626:	f7ff fe33 	bl	8000290 <main>

0800062a <LoopForever>:

LoopForever:
    b LoopForever
 800062a:	e7fe      	b.n	800062a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800062c:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8000630:	080027bc 	.word	0x080027bc
	ldr	r0, =_sdata
 8000634:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000638:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 800063c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000640:	2000002c 	.word	0x2000002c

08000644 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000644:	e7fe      	b.n	8000644 <ADC1_2_IRQHandler>
	...

08000648 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <HAL_Init+0x50>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a11      	ldr	r2, [pc, #68]	@ (8000698 <HAL_Init+0x50>)
 8000652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000658:	2003      	movs	r0, #3
 800065a:	f000 f96e 	bl	800093a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800065e:	f001 fe67 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 8000662:	4602      	mov	r2, r0
 8000664:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <HAL_Init+0x54>)
 8000666:	6a1b      	ldr	r3, [r3, #32]
 8000668:	f003 030f 	and.w	r3, r3, #15
 800066c:	490c      	ldr	r1, [pc, #48]	@ (80006a0 <HAL_Init+0x58>)
 800066e:	5ccb      	ldrb	r3, [r1, r3]
 8000670:	fa22 f303 	lsr.w	r3, r2, r3
 8000674:	4a0b      	ldr	r2, [pc, #44]	@ (80006a4 <HAL_Init+0x5c>)
 8000676:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000678:	2004      	movs	r0, #4
 800067a:	f000 f9a5 	bl	80009c8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800067e:	200f      	movs	r0, #15
 8000680:	f000 f812 	bl	80006a8 <HAL_InitTick>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	e002      	b.n	8000694 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800068e:	f7ff ff2f 	bl	80004f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000692:	2300      	movs	r3, #0
}
 8000694:	4618      	mov	r0, r3
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40022000 	.word	0x40022000
 800069c:	46020c00 	.word	0x46020c00
 80006a0:	080026e4 	.word	0x080026e4
 80006a4:	20000000 	.word	0x20000000

080006a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80006b4:	4b33      	ldr	r3, [pc, #204]	@ (8000784 <HAL_InitTick+0xdc>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d101      	bne.n	80006c0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80006bc:	2301      	movs	r3, #1
 80006be:	e05c      	b.n	800077a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80006c0:	4b31      	ldr	r3, [pc, #196]	@ (8000788 <HAL_InitTick+0xe0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f003 0304 	and.w	r3, r3, #4
 80006c8:	2b04      	cmp	r3, #4
 80006ca:	d10c      	bne.n	80006e6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80006cc:	4b2f      	ldr	r3, [pc, #188]	@ (800078c <HAL_InitTick+0xe4>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000784 <HAL_InitTick+0xdc>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	4619      	mov	r1, r3
 80006d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006da:	fbb3 f3f1 	udiv	r3, r3, r1
 80006de:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	e037      	b.n	8000756 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80006e6:	f000 f9c7 	bl	8000a78 <HAL_SYSTICK_GetCLKSourceConfig>
 80006ea:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	d023      	beq.n	800073a <HAL_InitTick+0x92>
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	2b02      	cmp	r3, #2
 80006f6:	d82d      	bhi.n	8000754 <HAL_InitTick+0xac>
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d003      	beq.n	8000706 <HAL_InitTick+0x5e>
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d00d      	beq.n	8000720 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000704:	e026      	b.n	8000754 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000706:	4b21      	ldr	r3, [pc, #132]	@ (800078c <HAL_InitTick+0xe4>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <HAL_InitTick+0xdc>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	4619      	mov	r1, r3
 8000710:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000714:	fbb3 f3f1 	udiv	r3, r3, r1
 8000718:	fbb2 f3f3 	udiv	r3, r2, r3
 800071c:	60fb      	str	r3, [r7, #12]
        break;
 800071e:	e01a      	b.n	8000756 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <HAL_InitTick+0xdc>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800072a:	fbb3 f3f2 	udiv	r3, r3, r2
 800072e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000732:	fbb2 f3f3 	udiv	r3, r2, r3
 8000736:	60fb      	str	r3, [r7, #12]
        break;
 8000738:	e00d      	b.n	8000756 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800073a:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <HAL_InitTick+0xdc>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	461a      	mov	r2, r3
 8000740:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000744:	fbb3 f3f2 	udiv	r3, r3, r2
 8000748:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800074c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000750:	60fb      	str	r3, [r7, #12]
        break;
 8000752:	e000      	b.n	8000756 <HAL_InitTick+0xae>
        break;
 8000754:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000756:	68f8      	ldr	r0, [r7, #12]
 8000758:	f000 f914 	bl	8000984 <HAL_SYSTICK_Config>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
 8000764:	e009      	b.n	800077a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000766:	2200      	movs	r2, #0
 8000768:	6879      	ldr	r1, [r7, #4]
 800076a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800076e:	f000 f8ef 	bl	8000950 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000772:	4a07      	ldr	r2, [pc, #28]	@ (8000790 <HAL_InitTick+0xe8>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000008 	.word	0x20000008
 8000788:	e000e010 	.word	0xe000e010
 800078c:	20000000 	.word	0x20000000
 8000790:	20000004 	.word	0x20000004

08000794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <HAL_IncTick+0x20>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	461a      	mov	r2, r3
 800079e:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <HAL_IncTick+0x24>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4413      	add	r3, r2
 80007a4:	4a04      	ldr	r2, [pc, #16]	@ (80007b8 <HAL_IncTick+0x24>)
 80007a6:	6013      	str	r3, [r2, #0]
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	20000008 	.word	0x20000008
 80007b8:	20000028 	.word	0x20000028

080007bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return uwTick;
 80007c0:	4b03      	ldr	r3, [pc, #12]	@ (80007d0 <HAL_GetTick+0x14>)
 80007c2:	681b      	ldr	r3, [r3, #0]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	20000028 	.word	0x20000028

080007d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007dc:	f7ff ffee 	bl	80007bc <HAL_GetTick>
 80007e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80007ec:	d005      	beq.n	80007fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <HAL_Delay+0x44>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	4413      	add	r3, r2
 80007f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007fa:	bf00      	nop
 80007fc:	f7ff ffde 	bl	80007bc <HAL_GetTick>
 8000800:	4602      	mov	r2, r0
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	429a      	cmp	r2, r3
 800080a:	d8f7      	bhi.n	80007fc <HAL_Delay+0x28>
  {
  }
}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000008 	.word	0x20000008

0800081c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800082c:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <__NVIC_SetPriorityGrouping+0x44>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000838:	4013      	ands	r3, r2
 800083a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000844:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800084c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800084e:	4a04      	ldr	r2, [pc, #16]	@ (8000860 <__NVIC_SetPriorityGrouping+0x44>)
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	60d3      	str	r3, [r2, #12]
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000868:	4b04      	ldr	r3, [pc, #16]	@ (800087c <__NVIC_GetPriorityGrouping+0x18>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	0a1b      	lsrs	r3, r3, #8
 800086e:	f003 0307 	and.w	r3, r3, #7
}
 8000872:	4618      	mov	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	6039      	str	r1, [r7, #0]
 800088a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800088c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000890:	2b00      	cmp	r3, #0
 8000892:	db0a      	blt.n	80008aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	b2da      	uxtb	r2, r3
 8000898:	490c      	ldr	r1, [pc, #48]	@ (80008cc <__NVIC_SetPriority+0x4c>)
 800089a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800089e:	0112      	lsls	r2, r2, #4
 80008a0:	b2d2      	uxtb	r2, r2
 80008a2:	440b      	add	r3, r1
 80008a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a8:	e00a      	b.n	80008c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4908      	ldr	r1, [pc, #32]	@ (80008d0 <__NVIC_SetPriority+0x50>)
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	f003 030f 	and.w	r3, r3, #15
 80008b6:	3b04      	subs	r3, #4
 80008b8:	0112      	lsls	r2, r2, #4
 80008ba:	b2d2      	uxtb	r2, r2
 80008bc:	440b      	add	r3, r1
 80008be:	761a      	strb	r2, [r3, #24]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	e000e100 	.word	0xe000e100
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b089      	sub	sp, #36	@ 0x24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	f1c3 0307 	rsb	r3, r3, #7
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	bf28      	it	cs
 80008f2:	2304      	movcs	r3, #4
 80008f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	3304      	adds	r3, #4
 80008fa:	2b06      	cmp	r3, #6
 80008fc:	d902      	bls.n	8000904 <NVIC_EncodePriority+0x30>
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	3b03      	subs	r3, #3
 8000902:	e000      	b.n	8000906 <NVIC_EncodePriority+0x32>
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000908:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43da      	mvns	r2, r3
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	401a      	ands	r2, r3
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800091c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	fa01 f303 	lsl.w	r3, r1, r3
 8000926:	43d9      	mvns	r1, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800092c:	4313      	orrs	r3, r2
         );
}
 800092e:	4618      	mov	r0, r3
 8000930:	3724      	adds	r7, #36	@ 0x24
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ff6a 	bl	800081c <__NVIC_SetPriorityGrouping>
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
 800095c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800095e:	f7ff ff81 	bl	8000864 <__NVIC_GetPriorityGrouping>
 8000962:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	68b9      	ldr	r1, [r7, #8]
 8000968:	6978      	ldr	r0, [r7, #20]
 800096a:	f7ff ffb3 	bl	80008d4 <NVIC_EncodePriority>
 800096e:	4602      	mov	r2, r0
 8000970:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000974:	4611      	mov	r1, r2
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff ff82 	bl	8000880 <__NVIC_SetPriority>
}
 800097c:	bf00      	nop
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3b01      	subs	r3, #1
 8000990:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000994:	d301      	bcc.n	800099a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000996:	2301      	movs	r3, #1
 8000998:	e00d      	b.n	80009b6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800099a:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <HAL_SYSTICK_Config+0x40>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3b01      	subs	r3, #1
 80009a0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <HAL_SYSTICK_Config+0x40>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <HAL_SYSTICK_Config+0x40>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a05      	ldr	r2, [pc, #20]	@ (80009c4 <HAL_SYSTICK_Config+0x40>)
 80009ae:	f043 0303 	orr.w	r3, r3, #3
 80009b2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000e010 	.word	0xe000e010

080009c8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	d844      	bhi.n	8000a60 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80009d6:	a201      	add	r2, pc, #4	@ (adr r2, 80009dc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80009d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009dc:	080009ff 	.word	0x080009ff
 80009e0:	08000a1d 	.word	0x08000a1d
 80009e4:	08000a3f 	.word	0x08000a3f
 80009e8:	08000a61 	.word	0x08000a61
 80009ec:	080009f1 	.word	0x080009f1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80009f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a1e      	ldr	r2, [pc, #120]	@ (8000a70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80009f6:	f043 0304 	orr.w	r3, r3, #4
 80009fa:	6013      	str	r3, [r2, #0]
      break;
 80009fc:	e031      	b.n	8000a62 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80009fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000a70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a1b      	ldr	r2, [pc, #108]	@ (8000a70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000a04:	f023 0304 	bic.w	r3, r3, #4
 8000a08:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a10:	4a18      	ldr	r2, [pc, #96]	@ (8000a74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000a12:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000a16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000a1a:	e022      	b.n	8000a62 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a13      	ldr	r2, [pc, #76]	@ (8000a70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000a22:	f023 0304 	bic.w	r3, r3, #4
 8000a26:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a2e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000a32:	4a10      	ldr	r2, [pc, #64]	@ (8000a74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000a34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000a3c:	e011      	b.n	8000a62 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a0b      	ldr	r2, [pc, #44]	@ (8000a70 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000a44:	f023 0304 	bic.w	r3, r3, #4
 8000a48:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a50:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000a54:	4a07      	ldr	r2, [pc, #28]	@ (8000a74 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000a56:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000a5e:	e000      	b.n	8000a62 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000a60:	bf00      	nop
  }
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000e010 	.word	0xe000e010
 8000a74:	46020c00 	.word	0x46020c00

08000a78 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000a7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d002      	beq.n	8000a90 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	e021      	b.n	8000ad4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8000a90:	4b15      	ldr	r3, [pc, #84]	@ (8000ae8 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a96:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000a9a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000aa2:	d011      	beq.n	8000ac8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000aaa:	d810      	bhi.n	8000ace <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d004      	beq.n	8000abc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000ab8:	d003      	beq.n	8000ac2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000aba:	e008      	b.n	8000ace <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
        break;
 8000ac0:	e008      	b.n	8000ad4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	607b      	str	r3, [r7, #4]
        break;
 8000ac6:	e005      	b.n	8000ad4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	607b      	str	r3, [r7, #4]
        break;
 8000acc:	e002      	b.n	8000ad4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
        break;
 8000ad2:	bf00      	nop
    }
  }
  return systick_source;
 8000ad4:	687b      	ldr	r3, [r7, #4]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000e010 	.word	0xe000e010
 8000ae8:	46020c00 	.word	0x46020c00

08000aec <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b089      	sub	sp, #36	@ 0x24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000afe:	e1ba      	b.n	8000e76 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	2101      	movs	r1, #1
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f000 81aa 	beq.w	8000e70 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a55      	ldr	r2, [pc, #340]	@ (8000c74 <HAL_GPIO_Init+0x188>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d15d      	bne.n	8000be0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43db      	mvns	r3, r3
 8000b34:	69fa      	ldr	r2, [r7, #28]
 8000b36:	4013      	ands	r3, r2
 8000b38:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 0201 	and.w	r2, r3, #1
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	69fa      	ldr	r2, [r7, #28]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	69fa      	ldr	r2, [r7, #28]
 8000b52:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000b54:	4a48      	ldr	r2, [pc, #288]	@ (8000c78 <HAL_GPIO_Init+0x18c>)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b5c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000b5e:	4a46      	ldr	r2, [pc, #280]	@ (8000c78 <HAL_GPIO_Init+0x18c>)
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	4413      	add	r3, r2
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	08da      	lsrs	r2, r3, #3
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	3208      	adds	r2, #8
 8000b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b76:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	220f      	movs	r2, #15
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	69fa      	ldr	r2, [r7, #28]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	f003 0307 	and.w	r3, r3, #7
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	220b      	movs	r2, #11
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	69fa      	ldr	r2, [r7, #28]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	08da      	lsrs	r2, r3, #3
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	3208      	adds	r2, #8
 8000baa:	69f9      	ldr	r1, [r7, #28]
 8000bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	2203      	movs	r2, #3
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	69fa      	ldr	r2, [r7, #28]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	2202      	movs	r2, #2
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	69fa      	ldr	r2, [r7, #28]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	69fa      	ldr	r2, [r7, #28]
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	e067      	b.n	8000cb0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d003      	beq.n	8000bf0 <HAL_GPIO_Init+0x104>
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2b12      	cmp	r3, #18
 8000bee:	d145      	bne.n	8000c7c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	08da      	lsrs	r2, r3, #3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3208      	adds	r2, #8
 8000bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bfc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	f003 0307 	and.w	r3, r3, #7
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	220f      	movs	r2, #15
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	69fa      	ldr	r2, [r7, #28]
 8000c10:	4013      	ands	r3, r2
 8000c12:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	691b      	ldr	r3, [r3, #16]
 8000c18:	f003 020f 	and.w	r2, r3, #15
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	69fa      	ldr	r2, [r7, #28]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	08da      	lsrs	r2, r3, #3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	3208      	adds	r2, #8
 8000c36:	69f9      	ldr	r1, [r7, #28]
 8000c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	2203      	movs	r2, #3
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	69fa      	ldr	r2, [r7, #28]
 8000c50:	4013      	ands	r3, r2
 8000c52:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f003 0203 	and.w	r2, r3, #3
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	69fa      	ldr	r2, [r7, #28]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	69fa      	ldr	r2, [r7, #28]
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	e01e      	b.n	8000cb0 <HAL_GPIO_Init+0x1c4>
 8000c72:	bf00      	nop
 8000c74:	46020000 	.word	0x46020000
 8000c78:	08002734 	.word	0x08002734
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	2203      	movs	r2, #3
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	69fa      	ldr	r2, [r7, #28]
 8000c90:	4013      	ands	r3, r2
 8000c92:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 0203 	and.w	r2, r3, #3
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	69fa      	ldr	r2, [r7, #28]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	69fa      	ldr	r2, [r7, #28]
 8000cae:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d00b      	beq.n	8000cd0 <HAL_GPIO_Init+0x1e4>
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d007      	beq.n	8000cd0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cc4:	2b11      	cmp	r3, #17
 8000cc6:	d003      	beq.n	8000cd0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2b12      	cmp	r3, #18
 8000cce:	d130      	bne.n	8000d32 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	2203      	movs	r2, #3
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	69fa      	ldr	r2, [r7, #28]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	68da      	ldr	r2, [r3, #12]
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	69fa      	ldr	r2, [r7, #28]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	69fa      	ldr	r2, [r7, #28]
 8000cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8000d06:	2201      	movs	r2, #1
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69fa      	ldr	r2, [r7, #28]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	091b      	lsrs	r3, r3, #4
 8000d1c:	f003 0201 	and.w	r2, r3, #1
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	69fa      	ldr	r2, [r7, #28]
 8000d30:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d017      	beq.n	8000d6a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	69fa      	ldr	r2, [r7, #28]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	69fa      	ldr	r2, [r7, #28]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	69fa      	ldr	r2, [r7, #28]
 8000d68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d07c      	beq.n	8000e70 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000d76:	4a47      	ldr	r2, [pc, #284]	@ (8000e94 <HAL_GPIO_Init+0x3a8>)
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	089b      	lsrs	r3, r3, #2
 8000d7c:	3318      	adds	r3, #24
 8000d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d82:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69fa      	ldr	r2, [r7, #28]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	0a9a      	lsrs	r2, r3, #10
 8000d9e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e98 <HAL_GPIO_Init+0x3ac>)
 8000da0:	4013      	ands	r3, r2
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	f002 0203 	and.w	r2, r2, #3
 8000da8:	00d2      	lsls	r2, r2, #3
 8000daa:	4093      	lsls	r3, r2
 8000dac:	69fa      	ldr	r2, [r7, #28]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000db2:	4938      	ldr	r1, [pc, #224]	@ (8000e94 <HAL_GPIO_Init+0x3a8>)
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	089b      	lsrs	r3, r3, #2
 8000db8:	3318      	adds	r3, #24
 8000dba:	69fa      	ldr	r2, [r7, #28]
 8000dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000dc0:	4b34      	ldr	r3, [pc, #208]	@ (8000e94 <HAL_GPIO_Init+0x3a8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69fa      	ldr	r2, [r7, #28]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8000ddc:	69fa      	ldr	r2, [r7, #28]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8000de4:	4a2b      	ldr	r2, [pc, #172]	@ (8000e94 <HAL_GPIO_Init+0x3a8>)
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000dea:	4b2a      	ldr	r3, [pc, #168]	@ (8000e94 <HAL_GPIO_Init+0x3a8>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	69fa      	ldr	r2, [r7, #28]
 8000df6:	4013      	ands	r3, r2
 8000df8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8000e06:	69fa      	ldr	r2, [r7, #28]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8000e0e:	4a21      	ldr	r2, [pc, #132]	@ (8000e94 <HAL_GPIO_Init+0x3a8>)
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000e14:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <HAL_GPIO_Init+0x3a8>)
 8000e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000e1a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69fa      	ldr	r2, [r7, #28]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8000e32:	69fa      	ldr	r2, [r7, #28]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8000e3a:	4a16      	ldr	r2, [pc, #88]	@ (8000e94 <HAL_GPIO_Init+0x3a8>)
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8000e42:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <HAL_GPIO_Init+0x3a8>)
 8000e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e48:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69fa      	ldr	r2, [r7, #28]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8000e60:	69fa      	ldr	r2, [r7, #28]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8000e68:	4a0a      	ldr	r2, [pc, #40]	@ (8000e94 <HAL_GPIO_Init+0x3a8>)
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	3301      	adds	r3, #1
 8000e74:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f47f ae3d 	bne.w	8000b00 <HAL_GPIO_Init+0x14>
  }
}
 8000e86:	bf00      	nop
 8000e88:	bf00      	nop
 8000e8a:	3724      	adds	r7, #36	@ 0x24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	46022000 	.word	0x46022000
 8000e98:	002f7f7f 	.word	0x002f7f7f

08000e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eac:	787b      	ldrb	r3, [r7, #1]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eb2:	887a      	ldrh	r2, [r7, #2]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8000eb8:	e002      	b.n	8000ec0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8000eba:	887a      	ldrh	r2, [r7, #2]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ede:	887a      	ldrh	r2, [r7, #2]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	041a      	lsls	r2, r3, #16
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	43d9      	mvns	r1, r3
 8000eea:	887b      	ldrh	r3, [r7, #2]
 8000eec:	400b      	ands	r3, r1
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	619a      	str	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d002      	beq.n	8000f1e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e007      	b.n	8000f2e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8000f1e:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f023 0204 	bic.w	r2, r3, #4
 8000f26:	4905      	ldr	r1, [pc, #20]	@ (8000f3c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	40030400 	.word	0x40030400

08000f40 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000f44:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <HAL_ICACHE_Enable+0x1c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a04      	ldr	r2, [pc, #16]	@ (8000f5c <HAL_ICACHE_Enable+0x1c>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	40030400 	.word	0x40030400

08000f60 <HAL_PWR_ConfigPVD>:
  * @param  pConfigPVD : Pointer to a PWR_PVDTypeDef structure that contains the
  *                      PVD configuration information (PVDLevel and EventMode).
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *pConfigPVD)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check the PVD parameter */
  if (pConfigPVD == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_PWR_ConfigPVD+0x12>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e059      	b.n	8001026 <HAL_PWR_ConfigPVD+0xc6>
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(pConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(pConfigPVD->Mode));

  /* Set PVDLS[2:0] bits according to PVDLevel value */
  MODIFY_REG(PWR->SVMCR, PWR_SVMCR_PVDLS, pConfigPVD->PVDLevel);
 8000f72:	4b30      	ldr	r3, [pc, #192]	@ (8001034 <HAL_PWR_ConfigPVD+0xd4>)
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	492d      	ldr	r1, [pc, #180]	@ (8001034 <HAL_PWR_ConfigPVD+0xd4>)
 8000f80:	4313      	orrs	r3, r2
 8000f82:	610b      	str	r3, [r1, #16]

  /* Disable PVD Event/Interrupt */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8000f84:	4b2c      	ldr	r3, [pc, #176]	@ (8001038 <HAL_PWR_ConfigPVD+0xd8>)
 8000f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000f8a:	4a2b      	ldr	r2, [pc, #172]	@ (8001038 <HAL_PWR_ConfigPVD+0xd8>)
 8000f8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f90:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8000f94:	4b28      	ldr	r3, [pc, #160]	@ (8001038 <HAL_PWR_ConfigPVD+0xd8>)
 8000f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f9a:	4a27      	ldr	r2, [pc, #156]	@ (8001038 <HAL_PWR_ConfigPVD+0xd8>)
 8000f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fa0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8000fa4:	4b24      	ldr	r3, [pc, #144]	@ (8001038 <HAL_PWR_ConfigPVD+0xd8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a23      	ldr	r2, [pc, #140]	@ (8001038 <HAL_PWR_ConfigPVD+0xd8>)
 8000faa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fae:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8000fb0:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <HAL_PWR_ConfigPVD+0xd8>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	4a20      	ldr	r2, [pc, #128]	@ (8001038 <HAL_PWR_ConfigPVD+0xd8>)
 8000fb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fba:	6053      	str	r3, [r2, #4]

  /* Configure the PVD in interrupt mode */
  if ((pConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d007      	beq.n	8000fd8 <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001038 <HAL_PWR_ConfigPVD+0xd8>)
 8000fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fce:	4a1a      	ldr	r2, [pc, #104]	@ (8001038 <HAL_PWR_ConfigPVD+0xd8>)
 8000fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  }

  /* Configure the PVD in event mode */
  if ((pConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d007      	beq.n	8000ff4 <HAL_PWR_ConfigPVD+0x94>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8000fe4:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <HAL_PWR_ConfigPVD+0xd8>)
 8000fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000fea:	4a13      	ldr	r2, [pc, #76]	@ (8001038 <HAL_PWR_ConfigPVD+0xd8>)
 8000fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ff0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  }

  /* Configure the PVD in rising edge */
  if ((pConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d005      	beq.n	800100c <HAL_PWR_ConfigPVD+0xac>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8001000:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <HAL_PWR_ConfigPVD+0xd8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0c      	ldr	r2, [pc, #48]	@ (8001038 <HAL_PWR_ConfigPVD+0xd8>)
 8001006:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800100a:	6013      	str	r3, [r2, #0]
  }

  /* Configure the PVD in falling edge */
  if ((pConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d005      	beq.n	8001024 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8001018:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <HAL_PWR_ConfigPVD+0xd8>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	4a06      	ldr	r2, [pc, #24]	@ (8001038 <HAL_PWR_ConfigPVD+0xd8>)
 800101e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001022:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	46020800 	.word	0x46020800
 8001038:	46022000 	.word	0x46022000

0800103c <HAL_PWR_EnablePVD>:
/**
  * @brief  Enable the programmable voltage detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_PVDE);
 8001040:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <HAL_PWR_EnablePVD+0x1c>)
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	4a04      	ldr	r2, [pc, #16]	@ (8001058 <HAL_PWR_EnablePVD+0x1c>)
 8001046:	f043 0310 	orr.w	r3, r3, #16
 800104a:	6113      	str	r3, [r2, #16]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	46020800 	.word	0x46020800

0800105c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001064:	4b39      	ldr	r3, [pc, #228]	@ (800114c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001068:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800106c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	429a      	cmp	r2, r3
 8001074:	d10b      	bne.n	800108e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800107c:	d905      	bls.n	800108a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800107e:	4b33      	ldr	r3, [pc, #204]	@ (800114c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	4a32      	ldr	r2, [pc, #200]	@ (800114c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001084:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001088:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	e057      	b.n	800113e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001094:	d90a      	bls.n	80010ac <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8001096:	4b2d      	ldr	r3, [pc, #180]	@ (800114c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	4a2a      	ldr	r2, [pc, #168]	@ (800114c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80010a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010a8:	60d3      	str	r3, [r2, #12]
 80010aa:	e007      	b.n	80010bc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80010ac:	4b27      	ldr	r3, [pc, #156]	@ (800114c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80010b4:	4925      	ldr	r1, [pc, #148]	@ (800114c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80010bc:	4b24      	ldr	r3, [pc, #144]	@ (8001150 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a24      	ldr	r2, [pc, #144]	@ (8001154 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80010c2:	fba2 2303 	umull	r2, r3, r2, r3
 80010c6:	099b      	lsrs	r3, r3, #6
 80010c8:	2232      	movs	r2, #50	@ 0x32
 80010ca:	fb02 f303 	mul.w	r3, r2, r3
 80010ce:	4a21      	ldr	r2, [pc, #132]	@ (8001154 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80010d0:	fba2 2303 	umull	r2, r3, r2, r3
 80010d4:	099b      	lsrs	r3, r3, #6
 80010d6:	3301      	adds	r3, #1
 80010d8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80010da:	e002      	b.n	80010e2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	3b01      	subs	r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80010e2:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d102      	bne.n	80010f4 <HAL_PWREx_ControlVoltageScaling+0x98>
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1f3      	bne.n	80010dc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d01b      	beq.n	8001132 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80010fa:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a15      	ldr	r2, [pc, #84]	@ (8001154 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001100:	fba2 2303 	umull	r2, r3, r2, r3
 8001104:	099b      	lsrs	r3, r3, #6
 8001106:	2232      	movs	r2, #50	@ 0x32
 8001108:	fb02 f303 	mul.w	r3, r2, r3
 800110c:	4a11      	ldr	r2, [pc, #68]	@ (8001154 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800110e:	fba2 2303 	umull	r2, r3, r2, r3
 8001112:	099b      	lsrs	r3, r3, #6
 8001114:	3301      	adds	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001118:	e002      	b.n	8001120 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3b01      	subs	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001120:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001124:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d102      	bne.n	8001132 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f3      	bne.n	800111a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e000      	b.n	800113e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	46020800 	.word	0x46020800
 8001150:	20000000 	.word	0x20000000
 8001154:	10624dd3 	.word	0x10624dd3

08001158 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800115c:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <HAL_PWREx_GetVoltageRange+0x18>)
 800115e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001160:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	46020800 	.word	0x46020800

08001174 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8001178:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <HAL_PWREx_EnableVddIO2+0x1c>)
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	4a04      	ldr	r2, [pc, #16]	@ (8001190 <HAL_PWREx_EnableVddIO2+0x1c>)
 800117e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001182:	6113      	str	r3, [r2, #16]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	46020800 	.word	0x46020800

08001194 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08e      	sub	sp, #56	@ 0x38
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800119c:	2300      	movs	r3, #0
 800119e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	f000 bec8 	b.w	8001f3e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ae:	4b99      	ldr	r3, [pc, #612]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011b8:	4b96      	ldr	r3, [pc, #600]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 80011ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0310 	and.w	r3, r3, #16
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 816c 	beq.w	80014a8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80011d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d007      	beq.n	80011e6 <HAL_RCC_OscConfig+0x52>
 80011d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011d8:	2b0c      	cmp	r3, #12
 80011da:	f040 80de 	bne.w	800139a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	f040 80da 	bne.w	800139a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d102      	bne.n	80011f4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	f000 bea5 	b.w	8001f3e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011f8:	4b86      	ldr	r3, [pc, #536]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d004      	beq.n	800120e <HAL_RCC_OscConfig+0x7a>
 8001204:	4b83      	ldr	r3, [pc, #524]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800120c:	e005      	b.n	800121a <HAL_RCC_OscConfig+0x86>
 800120e:	4b81      	ldr	r3, [pc, #516]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 8001210:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001214:	041b      	lsls	r3, r3, #16
 8001216:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800121a:	4293      	cmp	r3, r2
 800121c:	d255      	bcs.n	80012ca <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800121e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001220:	2b00      	cmp	r3, #0
 8001222:	d10a      	bne.n	800123a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001228:	4618      	mov	r0, r3
 800122a:	f001 f99d 	bl	8002568 <RCC_SetFlashLatencyFromMSIRange>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d002      	beq.n	800123a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	f000 be82 	b.w	8001f3e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800123a:	4b76      	ldr	r3, [pc, #472]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	4a75      	ldr	r2, [pc, #468]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 8001240:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001244:	6093      	str	r3, [r2, #8]
 8001246:	4b73      	ldr	r3, [pc, #460]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001252:	4970      	ldr	r1, [pc, #448]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 8001254:	4313      	orrs	r3, r2
 8001256:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001260:	d309      	bcc.n	8001276 <HAL_RCC_OscConfig+0xe2>
 8001262:	4b6c      	ldr	r3, [pc, #432]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	f023 021f 	bic.w	r2, r3, #31
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	4969      	ldr	r1, [pc, #420]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 8001270:	4313      	orrs	r3, r2
 8001272:	60cb      	str	r3, [r1, #12]
 8001274:	e07e      	b.n	8001374 <HAL_RCC_OscConfig+0x1e0>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127a:	2b00      	cmp	r3, #0
 800127c:	da0a      	bge.n	8001294 <HAL_RCC_OscConfig+0x100>
 800127e:	4b65      	ldr	r3, [pc, #404]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	015b      	lsls	r3, r3, #5
 800128c:	4961      	ldr	r1, [pc, #388]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 800128e:	4313      	orrs	r3, r2
 8001290:	60cb      	str	r3, [r1, #12]
 8001292:	e06f      	b.n	8001374 <HAL_RCC_OscConfig+0x1e0>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800129c:	d30a      	bcc.n	80012b4 <HAL_RCC_OscConfig+0x120>
 800129e:	4b5d      	ldr	r3, [pc, #372]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	029b      	lsls	r3, r3, #10
 80012ac:	4959      	ldr	r1, [pc, #356]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	60cb      	str	r3, [r1, #12]
 80012b2:	e05f      	b.n	8001374 <HAL_RCC_OscConfig+0x1e0>
 80012b4:	4b57      	ldr	r3, [pc, #348]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	03db      	lsls	r3, r3, #15
 80012c2:	4954      	ldr	r1, [pc, #336]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 80012c4:	4313      	orrs	r3, r2
 80012c6:	60cb      	str	r3, [r1, #12]
 80012c8:	e054      	b.n	8001374 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80012ca:	4b52      	ldr	r3, [pc, #328]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	4a51      	ldr	r2, [pc, #324]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 80012d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80012d4:	6093      	str	r3, [r2, #8]
 80012d6:	4b4f      	ldr	r3, [pc, #316]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e2:	494c      	ldr	r1, [pc, #304]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80012f0:	d309      	bcc.n	8001306 <HAL_RCC_OscConfig+0x172>
 80012f2:	4b48      	ldr	r3, [pc, #288]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	f023 021f 	bic.w	r2, r3, #31
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	4945      	ldr	r1, [pc, #276]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 8001300:	4313      	orrs	r3, r2
 8001302:	60cb      	str	r3, [r1, #12]
 8001304:	e028      	b.n	8001358 <HAL_RCC_OscConfig+0x1c4>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130a:	2b00      	cmp	r3, #0
 800130c:	da0a      	bge.n	8001324 <HAL_RCC_OscConfig+0x190>
 800130e:	4b41      	ldr	r3, [pc, #260]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	015b      	lsls	r3, r3, #5
 800131c:	493d      	ldr	r1, [pc, #244]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 800131e:	4313      	orrs	r3, r2
 8001320:	60cb      	str	r3, [r1, #12]
 8001322:	e019      	b.n	8001358 <HAL_RCC_OscConfig+0x1c4>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800132c:	d30a      	bcc.n	8001344 <HAL_RCC_OscConfig+0x1b0>
 800132e:	4b39      	ldr	r3, [pc, #228]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	029b      	lsls	r3, r3, #10
 800133c:	4935      	ldr	r1, [pc, #212]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 800133e:	4313      	orrs	r3, r2
 8001340:	60cb      	str	r3, [r1, #12]
 8001342:	e009      	b.n	8001358 <HAL_RCC_OscConfig+0x1c4>
 8001344:	4b33      	ldr	r3, [pc, #204]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	03db      	lsls	r3, r3, #15
 8001352:	4930      	ldr	r1, [pc, #192]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 8001354:	4313      	orrs	r3, r2
 8001356:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10a      	bne.n	8001374 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001362:	4618      	mov	r0, r3
 8001364:	f001 f900 	bl	8002568 <RCC_SetFlashLatencyFromMSIRange>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	f000 bde5 	b.w	8001f3e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001374:	f001 f8de 	bl	8002534 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001378:	4b27      	ldr	r3, [pc, #156]	@ (8001418 <HAL_RCC_OscConfig+0x284>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f993 	bl	80006a8 <HAL_InitTick>
 8001382:	4603      	mov	r3, r0
 8001384:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8001388:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 808a 	beq.w	80014a6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8001392:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001396:	f000 bdd2 	b.w	8001f3e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d066      	beq.n	8001470 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80013a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80013ae:	f7ff fa05 	bl	80007bc <HAL_GetTick>
 80013b2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80013b4:	e009      	b.n	80013ca <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013b6:	f7ff fa01 	bl	80007bc <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d902      	bls.n	80013ca <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	f000 bdba 	b.w	8001f3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80013ca:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0ef      	beq.n	80013b6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80013d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	4a0e      	ldr	r2, [pc, #56]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 80013dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80013e0:	6093      	str	r3, [r2, #8]
 80013e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ee:	4909      	ldr	r1, [pc, #36]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80013fc:	d30e      	bcc.n	800141c <HAL_RCC_OscConfig+0x288>
 80013fe:	4b05      	ldr	r3, [pc, #20]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	f023 021f 	bic.w	r2, r3, #31
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	4902      	ldr	r1, [pc, #8]	@ (8001414 <HAL_RCC_OscConfig+0x280>)
 800140c:	4313      	orrs	r3, r2
 800140e:	60cb      	str	r3, [r1, #12]
 8001410:	e04a      	b.n	80014a8 <HAL_RCC_OscConfig+0x314>
 8001412:	bf00      	nop
 8001414:	46020c00 	.word	0x46020c00
 8001418:	20000004 	.word	0x20000004
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001420:	2b00      	cmp	r3, #0
 8001422:	da0a      	bge.n	800143a <HAL_RCC_OscConfig+0x2a6>
 8001424:	4b98      	ldr	r3, [pc, #608]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	015b      	lsls	r3, r3, #5
 8001432:	4995      	ldr	r1, [pc, #596]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 8001434:	4313      	orrs	r3, r2
 8001436:	60cb      	str	r3, [r1, #12]
 8001438:	e036      	b.n	80014a8 <HAL_RCC_OscConfig+0x314>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001442:	d30a      	bcc.n	800145a <HAL_RCC_OscConfig+0x2c6>
 8001444:	4b90      	ldr	r3, [pc, #576]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	029b      	lsls	r3, r3, #10
 8001452:	498d      	ldr	r1, [pc, #564]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 8001454:	4313      	orrs	r3, r2
 8001456:	60cb      	str	r3, [r1, #12]
 8001458:	e026      	b.n	80014a8 <HAL_RCC_OscConfig+0x314>
 800145a:	4b8b      	ldr	r3, [pc, #556]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	03db      	lsls	r3, r3, #15
 8001468:	4987      	ldr	r1, [pc, #540]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 800146a:	4313      	orrs	r3, r2
 800146c:	60cb      	str	r3, [r1, #12]
 800146e:	e01b      	b.n	80014a8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001470:	4b85      	ldr	r3, [pc, #532]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a84      	ldr	r2, [pc, #528]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 8001476:	f023 0301 	bic.w	r3, r3, #1
 800147a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800147c:	f7ff f99e 	bl	80007bc <HAL_GetTick>
 8001480:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001482:	e009      	b.n	8001498 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001484:	f7ff f99a 	bl	80007bc <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d902      	bls.n	8001498 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	f000 bd53 	b.w	8001f3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001498:	4b7b      	ldr	r3, [pc, #492]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1ef      	bne.n	8001484 <HAL_RCC_OscConfig+0x2f0>
 80014a4:	e000      	b.n	80014a8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80014a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 808b 	beq.w	80015cc <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80014b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014b8:	2b08      	cmp	r3, #8
 80014ba:	d005      	beq.n	80014c8 <HAL_RCC_OscConfig+0x334>
 80014bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014be:	2b0c      	cmp	r3, #12
 80014c0:	d109      	bne.n	80014d6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d106      	bne.n	80014d6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d17d      	bne.n	80015cc <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	f000 bd34 	b.w	8001f3e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014de:	d106      	bne.n	80014ee <HAL_RCC_OscConfig+0x35a>
 80014e0:	4b69      	ldr	r3, [pc, #420]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a68      	ldr	r2, [pc, #416]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 80014e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	e041      	b.n	8001572 <HAL_RCC_OscConfig+0x3de>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014f6:	d112      	bne.n	800151e <HAL_RCC_OscConfig+0x38a>
 80014f8:	4b63      	ldr	r3, [pc, #396]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a62      	ldr	r2, [pc, #392]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 80014fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b60      	ldr	r3, [pc, #384]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a5f      	ldr	r2, [pc, #380]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 800150a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b5d      	ldr	r3, [pc, #372]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a5c      	ldr	r2, [pc, #368]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 8001516:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	e029      	b.n	8001572 <HAL_RCC_OscConfig+0x3de>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001526:	d112      	bne.n	800154e <HAL_RCC_OscConfig+0x3ba>
 8001528:	4b57      	ldr	r3, [pc, #348]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a56      	ldr	r2, [pc, #344]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 800152e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b54      	ldr	r3, [pc, #336]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a53      	ldr	r2, [pc, #332]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 800153a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	4b51      	ldr	r3, [pc, #324]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a50      	ldr	r2, [pc, #320]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 8001546:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	e011      	b.n	8001572 <HAL_RCC_OscConfig+0x3de>
 800154e:	4b4e      	ldr	r3, [pc, #312]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a4d      	ldr	r2, [pc, #308]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 8001554:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	4b4b      	ldr	r3, [pc, #300]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a4a      	ldr	r2, [pc, #296]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 8001560:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	4b48      	ldr	r3, [pc, #288]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a47      	ldr	r2, [pc, #284]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 800156c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001570:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d014      	beq.n	80015a4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800157a:	f7ff f91f 	bl	80007bc <HAL_GetTick>
 800157e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001580:	e009      	b.n	8001596 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001582:	f7ff f91b 	bl	80007bc <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b64      	cmp	r3, #100	@ 0x64
 800158e:	d902      	bls.n	8001596 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	f000 bcd4 	b.w	8001f3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001596:	4b3c      	ldr	r3, [pc, #240]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0ef      	beq.n	8001582 <HAL_RCC_OscConfig+0x3ee>
 80015a2:	e013      	b.n	80015cc <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80015a4:	f7ff f90a 	bl	80007bc <HAL_GetTick>
 80015a8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015aa:	e009      	b.n	80015c0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff f906 	bl	80007bc <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	@ 0x64
 80015b8:	d902      	bls.n	80015c0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	f000 bcbf 	b.w	8001f3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015c0:	4b31      	ldr	r3, [pc, #196]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1ef      	bne.n	80015ac <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d05f      	beq.n	8001698 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80015d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d005      	beq.n	80015ea <HAL_RCC_OscConfig+0x456>
 80015de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015e0:	2b0c      	cmp	r3, #12
 80015e2:	d114      	bne.n	800160e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d111      	bne.n	800160e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d102      	bne.n	80015f8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	f000 bca3 	b.w	8001f3e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80015f8:	4b23      	ldr	r3, [pc, #140]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	041b      	lsls	r3, r3, #16
 8001606:	4920      	ldr	r1, [pc, #128]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 8001608:	4313      	orrs	r3, r2
 800160a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800160c:	e044      	b.n	8001698 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d024      	beq.n	8001660 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001616:	4b1c      	ldr	r3, [pc, #112]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a1b      	ldr	r2, [pc, #108]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 800161c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001620:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001622:	f7ff f8cb 	bl	80007bc <HAL_GetTick>
 8001626:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001628:	e009      	b.n	800163e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162a:	f7ff f8c7 	bl	80007bc <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d902      	bls.n	800163e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	f000 bc80 	b.w	8001f3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800163e:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0ef      	beq.n	800162a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800164a:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	041b      	lsls	r3, r3, #16
 8001658:	490b      	ldr	r1, [pc, #44]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 800165a:	4313      	orrs	r3, r2
 800165c:	610b      	str	r3, [r1, #16]
 800165e:	e01b      	b.n	8001698 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001660:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a08      	ldr	r2, [pc, #32]	@ (8001688 <HAL_RCC_OscConfig+0x4f4>)
 8001666:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800166a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800166c:	f7ff f8a6 	bl	80007bc <HAL_GetTick>
 8001670:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001672:	e00b      	b.n	800168c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001674:	f7ff f8a2 	bl	80007bc <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d904      	bls.n	800168c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	f000 bc5b 	b.w	8001f3e <HAL_RCC_OscConfig+0xdaa>
 8001688:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800168c:	4baf      	ldr	r3, [pc, #700]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1ed      	bne.n	8001674 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80c8 	beq.w	8001836 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ac:	4ba7      	ldr	r3, [pc, #668]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 80016ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d111      	bne.n	80016de <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	4ba4      	ldr	r3, [pc, #656]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 80016bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c0:	4aa2      	ldr	r2, [pc, #648]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 80016c2:	f043 0304 	orr.w	r3, r3, #4
 80016c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80016ca:	4ba0      	ldr	r3, [pc, #640]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 80016cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80016d8:	2301      	movs	r3, #1
 80016da:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80016de:	4b9c      	ldr	r3, [pc, #624]	@ (8001950 <HAL_RCC_OscConfig+0x7bc>)
 80016e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d119      	bne.n	800171e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80016ea:	4b99      	ldr	r3, [pc, #612]	@ (8001950 <HAL_RCC_OscConfig+0x7bc>)
 80016ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ee:	4a98      	ldr	r2, [pc, #608]	@ (8001950 <HAL_RCC_OscConfig+0x7bc>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f6:	f7ff f861 	bl	80007bc <HAL_GetTick>
 80016fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80016fc:	e009      	b.n	8001712 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016fe:	f7ff f85d 	bl	80007bc <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d902      	bls.n	8001712 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	f000 bc16 	b.w	8001f3e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001712:	4b8f      	ldr	r3, [pc, #572]	@ (8001950 <HAL_RCC_OscConfig+0x7bc>)
 8001714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0ef      	beq.n	80016fe <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d05f      	beq.n	80017e6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001726:	4b89      	ldr	r3, [pc, #548]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 8001728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800172c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699a      	ldr	r2, [r3, #24]
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001738:	429a      	cmp	r2, r3
 800173a:	d037      	beq.n	80017ac <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d006      	beq.n	8001754 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001746:	6a3b      	ldr	r3, [r7, #32]
 8001748:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e3f4      	b.n	8001f3e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d01b      	beq.n	8001796 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800175e:	4b7b      	ldr	r3, [pc, #492]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 8001760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001764:	4a79      	ldr	r2, [pc, #484]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 8001766:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800176a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800176e:	f7ff f825 	bl	80007bc <HAL_GetTick>
 8001772:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001776:	f7ff f821 	bl	80007bc <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b05      	cmp	r3, #5
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e3da      	b.n	8001f3e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001788:	4b70      	ldr	r3, [pc, #448]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 800178a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800178e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1ef      	bne.n	8001776 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001796:	4b6d      	ldr	r3, [pc, #436]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 8001798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800179c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	4969      	ldr	r1, [pc, #420]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80017ac:	4b67      	ldr	r3, [pc, #412]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 80017ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017b2:	4a66      	ldr	r2, [pc, #408]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 80017b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80017b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80017bc:	f7fe fffe 	bl	80007bc <HAL_GetTick>
 80017c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c4:	f7fe fffa 	bl	80007bc <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b05      	cmp	r3, #5
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e3b3      	b.n	8001f3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80017d6:	4b5d      	ldr	r3, [pc, #372]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 80017d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0ef      	beq.n	80017c4 <HAL_RCC_OscConfig+0x630>
 80017e4:	e01b      	b.n	800181e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80017e6:	4b59      	ldr	r3, [pc, #356]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 80017e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017ec:	4a57      	ldr	r2, [pc, #348]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 80017ee:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80017f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80017f6:	f7fe ffe1 	bl	80007bc <HAL_GetTick>
 80017fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017fe:	f7fe ffdd 	bl	80007bc <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b05      	cmp	r3, #5
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e396      	b.n	8001f3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001810:	4b4e      	ldr	r3, [pc, #312]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 8001812:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001816:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1ef      	bne.n	80017fe <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800181e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001822:	2b01      	cmp	r3, #1
 8001824:	d107      	bne.n	8001836 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001826:	4b49      	ldr	r3, [pc, #292]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 8001828:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800182c:	4a47      	ldr	r2, [pc, #284]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 800182e:	f023 0304 	bic.w	r3, r3, #4
 8001832:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8111 	beq.w	8001a66 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800184a:	4b40      	ldr	r3, [pc, #256]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 800184c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	d111      	bne.n	800187c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001858:	4b3c      	ldr	r3, [pc, #240]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 800185a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800185e:	4a3b      	ldr	r2, [pc, #236]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001868:	4b38      	ldr	r3, [pc, #224]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 800186a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001876:	2301      	movs	r3, #1
 8001878:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800187c:	4b34      	ldr	r3, [pc, #208]	@ (8001950 <HAL_RCC_OscConfig+0x7bc>)
 800187e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d118      	bne.n	80018ba <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001888:	4b31      	ldr	r3, [pc, #196]	@ (8001950 <HAL_RCC_OscConfig+0x7bc>)
 800188a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188c:	4a30      	ldr	r2, [pc, #192]	@ (8001950 <HAL_RCC_OscConfig+0x7bc>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001894:	f7fe ff92 	bl	80007bc <HAL_GetTick>
 8001898:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800189c:	f7fe ff8e 	bl	80007bc <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e347      	b.n	8001f3e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80018ae:	4b28      	ldr	r3, [pc, #160]	@ (8001950 <HAL_RCC_OscConfig+0x7bc>)
 80018b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0f0      	beq.n	800189c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d01f      	beq.n	8001906 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d010      	beq.n	80018f4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80018d2:	4b1e      	ldr	r3, [pc, #120]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 80018d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018d8:	4a1c      	ldr	r2, [pc, #112]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 80018da:	f043 0304 	orr.w	r3, r3, #4
 80018de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018e2:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 80018e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018e8:	4a18      	ldr	r2, [pc, #96]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80018f2:	e018      	b.n	8001926 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018f4:	4b15      	ldr	r3, [pc, #84]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 80018f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018fa:	4a14      	ldr	r2, [pc, #80]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001904:	e00f      	b.n	8001926 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001906:	4b11      	ldr	r3, [pc, #68]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 8001908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800190c:	4a0f      	ldr	r2, [pc, #60]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 800190e:	f023 0301 	bic.w	r3, r3, #1
 8001912:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001916:	4b0d      	ldr	r3, [pc, #52]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 8001918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800191c:	4a0b      	ldr	r2, [pc, #44]	@ (800194c <HAL_RCC_OscConfig+0x7b8>)
 800191e:	f023 0304 	bic.w	r3, r3, #4
 8001922:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d057      	beq.n	80019de <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800192e:	f7fe ff45 	bl	80007bc <HAL_GetTick>
 8001932:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001934:	e00e      	b.n	8001954 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001936:	f7fe ff41 	bl	80007bc <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001944:	4293      	cmp	r3, r2
 8001946:	d905      	bls.n	8001954 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e2f8      	b.n	8001f3e <HAL_RCC_OscConfig+0xdaa>
 800194c:	46020c00 	.word	0x46020c00
 8001950:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001954:	4b9c      	ldr	r3, [pc, #624]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001956:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0e9      	beq.n	8001936 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800196a:	2b00      	cmp	r3, #0
 800196c:	d01b      	beq.n	80019a6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800196e:	4b96      	ldr	r3, [pc, #600]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001974:	4a94      	ldr	r2, [pc, #592]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800197a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800197e:	e00a      	b.n	8001996 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001980:	f7fe ff1c 	bl	80007bc <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e2d3      	b.n	8001f3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001996:	4b8c      	ldr	r3, [pc, #560]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001998:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800199c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0ed      	beq.n	8001980 <HAL_RCC_OscConfig+0x7ec>
 80019a4:	e053      	b.n	8001a4e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80019a6:	4b88      	ldr	r3, [pc, #544]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 80019a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019ac:	4a86      	ldr	r2, [pc, #536]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 80019ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80019b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b8:	f7fe ff00 	bl	80007bc <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e2b7      	b.n	8001f3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80019ce:	4b7e      	ldr	r3, [pc, #504]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 80019d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1ed      	bne.n	80019b8 <HAL_RCC_OscConfig+0x824>
 80019dc:	e037      	b.n	8001a4e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80019de:	f7fe feed 	bl	80007bc <HAL_GetTick>
 80019e2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019e4:	e00a      	b.n	80019fc <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e6:	f7fe fee9 	bl	80007bc <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e2a0      	b.n	8001f3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019fc:	4b72      	ldr	r3, [pc, #456]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 80019fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1ed      	bne.n	80019e6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001a0a:	4b6f      	ldr	r3, [pc, #444]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001a0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d01a      	beq.n	8001a4e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a18:	4b6b      	ldr	r3, [pc, #428]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001a1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a1e:	4a6a      	ldr	r2, [pc, #424]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001a20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a24:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a28:	e00a      	b.n	8001a40 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7fe fec7 	bl	80007bc <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e27e      	b.n	8001f3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a40:	4b61      	ldr	r3, [pc, #388]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001a42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1ed      	bne.n	8001a2a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a4e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a56:	4b5c      	ldr	r3, [pc, #368]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a5c:	4a5a      	ldr	r2, [pc, #360]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001a5e:	f023 0304 	bic.w	r3, r3, #4
 8001a62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0320 	and.w	r3, r3, #32
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d036      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d019      	beq.n	8001aae <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001a7a:	4b53      	ldr	r3, [pc, #332]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a52      	ldr	r2, [pc, #328]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001a80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a84:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001a86:	f7fe fe99 	bl	80007bc <HAL_GetTick>
 8001a8a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a8e:	f7fe fe95 	bl	80007bc <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e24e      	b.n	8001f3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001aa0:	4b49      	ldr	r3, [pc, #292]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x8fa>
 8001aac:	e018      	b.n	8001ae0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001aae:	4b46      	ldr	r3, [pc, #280]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a45      	ldr	r2, [pc, #276]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001ab4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ab8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001aba:	f7fe fe7f 	bl	80007bc <HAL_GetTick>
 8001abe:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ac2:	f7fe fe7b 	bl	80007bc <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e234      	b.n	8001f3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001ad4:	4b3c      	ldr	r3, [pc, #240]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d036      	beq.n	8001b5a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d019      	beq.n	8001b28 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001af4:	4b34      	ldr	r3, [pc, #208]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a33      	ldr	r2, [pc, #204]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001afa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001afe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001b00:	f7fe fe5c 	bl	80007bc <HAL_GetTick>
 8001b04:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001b08:	f7fe fe58 	bl	80007bc <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e211      	b.n	8001f3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x974>
 8001b26:	e018      	b.n	8001b5a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001b28:	4b27      	ldr	r3, [pc, #156]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a26      	ldr	r2, [pc, #152]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001b2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b32:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001b34:	f7fe fe42 	bl	80007bc <HAL_GetTick>
 8001b38:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001b3c:	f7fe fe3e 	bl	80007bc <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e1f7      	b.n	8001f3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d07f      	beq.n	8001c66 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d062      	beq.n	8001c34 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001b6e:	4b16      	ldr	r3, [pc, #88]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	4a15      	ldr	r2, [pc, #84]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001b74:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b78:	6093      	str	r3, [r2, #8]
 8001b7a:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b86:	4910      	ldr	r1, [pc, #64]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b90:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001b94:	d309      	bcc.n	8001baa <HAL_RCC_OscConfig+0xa16>
 8001b96:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	f023 021f 	bic.w	r2, r3, #31
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4909      	ldr	r1, [pc, #36]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	60cb      	str	r3, [r1, #12]
 8001ba8:	e02a      	b.n	8001c00 <HAL_RCC_OscConfig+0xa6c>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	da0c      	bge.n	8001bcc <HAL_RCC_OscConfig+0xa38>
 8001bb2:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	015b      	lsls	r3, r3, #5
 8001bc0:	4901      	ldr	r1, [pc, #4]	@ (8001bc8 <HAL_RCC_OscConfig+0xa34>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	60cb      	str	r3, [r1, #12]
 8001bc6:	e01b      	b.n	8001c00 <HAL_RCC_OscConfig+0xa6c>
 8001bc8:	46020c00 	.word	0x46020c00
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bd4:	d30a      	bcc.n	8001bec <HAL_RCC_OscConfig+0xa58>
 8001bd6:	4ba1      	ldr	r3, [pc, #644]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	029b      	lsls	r3, r3, #10
 8001be4:	499d      	ldr	r1, [pc, #628]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	60cb      	str	r3, [r1, #12]
 8001bea:	e009      	b.n	8001c00 <HAL_RCC_OscConfig+0xa6c>
 8001bec:	4b9b      	ldr	r3, [pc, #620]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	03db      	lsls	r3, r3, #15
 8001bfa:	4998      	ldr	r1, [pc, #608]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001c00:	4b96      	ldr	r3, [pc, #600]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a95      	ldr	r2, [pc, #596]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001c06:	f043 0310 	orr.w	r3, r3, #16
 8001c0a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001c0c:	f7fe fdd6 	bl	80007bc <HAL_GetTick>
 8001c10:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001c14:	f7fe fdd2 	bl	80007bc <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e18b      	b.n	8001f3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001c26:	4b8d      	ldr	r3, [pc, #564]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0320 	and.w	r3, r3, #32
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0xa80>
 8001c32:	e018      	b.n	8001c66 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8001c34:	4b89      	ldr	r3, [pc, #548]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a88      	ldr	r2, [pc, #544]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001c3a:	f023 0310 	bic.w	r3, r3, #16
 8001c3e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001c40:	f7fe fdbc 	bl	80007bc <HAL_GetTick>
 8001c44:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001c48:	f7fe fdb8 	bl	80007bc <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e171      	b.n	8001f3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001c5a:	4b80      	ldr	r3, [pc, #512]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8166 	beq.w	8001f3c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c76:	4b79      	ldr	r3, [pc, #484]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	f000 80f2 	beq.w	8001e68 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	f040 80c5 	bne.w	8001e18 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001c8e:	4b73      	ldr	r3, [pc, #460]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a72      	ldr	r2, [pc, #456]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001c94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c98:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001c9a:	f7fe fd8f 	bl	80007bc <HAL_GetTick>
 8001c9e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca2:	f7fe fd8b 	bl	80007bc <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e144      	b.n	8001f3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001cb4:	4b69      	ldr	r3, [pc, #420]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1f0      	bne.n	8001ca2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc0:	4b66      	ldr	r3, [pc, #408]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d111      	bne.n	8001cf2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	4b63      	ldr	r3, [pc, #396]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cd4:	4a61      	ldr	r2, [pc, #388]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001cde:	4b5f      	ldr	r3, [pc, #380]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8001cec:	2301      	movs	r3, #1
 8001cee:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001cf2:	4b5b      	ldr	r3, [pc, #364]	@ (8001e60 <HAL_RCC_OscConfig+0xccc>)
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cfa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001cfe:	d102      	bne.n	8001d06 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8001d00:	2301      	movs	r3, #1
 8001d02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001d06:	4b56      	ldr	r3, [pc, #344]	@ (8001e60 <HAL_RCC_OscConfig+0xccc>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	4a55      	ldr	r2, [pc, #340]	@ (8001e60 <HAL_RCC_OscConfig+0xccc>)
 8001d0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d10:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8001d12:	4b52      	ldr	r3, [pc, #328]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001d1a:	f023 0303 	bic.w	r3, r3, #3
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d26:	3a01      	subs	r2, #1
 8001d28:	0212      	lsls	r2, r2, #8
 8001d2a:	4311      	orrs	r1, r2
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d30:	430a      	orrs	r2, r1
 8001d32:	494a      	ldr	r1, [pc, #296]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	628b      	str	r3, [r1, #40]	@ 0x28
 8001d38:	4b48      	ldr	r3, [pc, #288]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001d3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d3c:	4b49      	ldr	r3, [pc, #292]	@ (8001e64 <HAL_RCC_OscConfig+0xcd0>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d44:	3a01      	subs	r2, #1
 8001d46:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001d4e:	3a01      	subs	r2, #1
 8001d50:	0252      	lsls	r2, r2, #9
 8001d52:	b292      	uxth	r2, r2
 8001d54:	4311      	orrs	r1, r2
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d5a:	3a01      	subs	r2, #1
 8001d5c:	0412      	lsls	r2, r2, #16
 8001d5e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8001d62:	4311      	orrs	r1, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001d68:	3a01      	subs	r2, #1
 8001d6a:	0612      	lsls	r2, r2, #24
 8001d6c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8001d70:	430a      	orrs	r2, r1
 8001d72:	493a      	ldr	r1, [pc, #232]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001d78:	4b38      	ldr	r3, [pc, #224]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7c:	4a37      	ldr	r2, [pc, #220]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001d7e:	f023 0310 	bic.w	r3, r3, #16
 8001d82:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d88:	4a34      	ldr	r2, [pc, #208]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001d8e:	4b33      	ldr	r3, [pc, #204]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d92:	4a32      	ldr	r2, [pc, #200]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001d94:	f043 0310 	orr.w	r3, r3, #16
 8001d98:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8001d9a:	4b30      	ldr	r3, [pc, #192]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9e:	f023 020c 	bic.w	r2, r3, #12
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da6:	492d      	ldr	r1, [pc, #180]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8001dac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d105      	bne.n	8001dc0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001db4:	4b2a      	ldr	r3, [pc, #168]	@ (8001e60 <HAL_RCC_OscConfig+0xccc>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4a29      	ldr	r2, [pc, #164]	@ (8001e60 <HAL_RCC_OscConfig+0xccc>)
 8001dba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dbe:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8001dc0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d107      	bne.n	8001dd8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8001dc8:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dce:	4a23      	ldr	r2, [pc, #140]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001dd0:	f023 0304 	bic.w	r3, r3, #4
 8001dd4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8001dd8:	4b20      	ldr	r3, [pc, #128]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001dde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001de2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001de4:	f7fe fcea 	bl	80007bc <HAL_GetTick>
 8001de8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7fe fce6 	bl	80007bc <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e09f      	b.n	8001f3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001dfe:	4b17      	ldr	r3, [pc, #92]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e0a:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0e:	4a13      	ldr	r2, [pc, #76]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001e10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e14:	6293      	str	r3, [r2, #40]	@ 0x28
 8001e16:	e091      	b.n	8001f3c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001e18:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0f      	ldr	r2, [pc, #60]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001e1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e22:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001e24:	f7fe fcca 	bl	80007bc <HAL_GetTick>
 8001e28:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7fe fcc6 	bl	80007bc <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e07f      	b.n	8001f3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e3e:	4b07      	ldr	r3, [pc, #28]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001e4a:	4b04      	ldr	r3, [pc, #16]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4e:	4a03      	ldr	r2, [pc, #12]	@ (8001e5c <HAL_RCC_OscConfig+0xcc8>)
 8001e50:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001e54:	f023 0303 	bic.w	r3, r3, #3
 8001e58:	6293      	str	r3, [r2, #40]	@ 0x28
 8001e5a:	e06f      	b.n	8001f3c <HAL_RCC_OscConfig+0xda8>
 8001e5c:	46020c00 	.word	0x46020c00
 8001e60:	46020800 	.word	0x46020800
 8001e64:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001e68:	4b37      	ldr	r3, [pc, #220]	@ (8001f48 <HAL_RCC_OscConfig+0xdb4>)
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e6e:	4b36      	ldr	r3, [pc, #216]	@ (8001f48 <HAL_RCC_OscConfig+0xdb4>)
 8001e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e72:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d039      	beq.n	8001ef0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0203 	and.w	r2, r3, #3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d132      	bne.n	8001ef0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d129      	bne.n	8001ef0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d122      	bne.n	8001ef0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d11a      	bne.n	8001ef0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	0a5b      	lsrs	r3, r3, #9
 8001ebe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d111      	bne.n	8001ef0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	0c1b      	lsrs	r3, r3, #16
 8001ed0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ed8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d108      	bne.n	8001ef0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	0e1b      	lsrs	r3, r3, #24
 8001ee2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eea:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e024      	b.n	8001f3e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001ef4:	4b14      	ldr	r3, [pc, #80]	@ (8001f48 <HAL_RCC_OscConfig+0xdb4>)
 8001ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ef8:	08db      	lsrs	r3, r3, #3
 8001efa:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d01a      	beq.n	8001f3c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001f06:	4b10      	ldr	r3, [pc, #64]	@ (8001f48 <HAL_RCC_OscConfig+0xdb4>)
 8001f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001f48 <HAL_RCC_OscConfig+0xdb4>)
 8001f0c:	f023 0310 	bic.w	r3, r3, #16
 8001f10:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f12:	f7fe fc53 	bl	80007bc <HAL_GetTick>
 8001f16:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8001f18:	bf00      	nop
 8001f1a:	f7fe fc4f 	bl	80007bc <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d0f9      	beq.n	8001f1a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2a:	4a07      	ldr	r2, [pc, #28]	@ (8001f48 <HAL_RCC_OscConfig+0xdb4>)
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001f30:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <HAL_RCC_OscConfig+0xdb4>)
 8001f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f34:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <HAL_RCC_OscConfig+0xdb4>)
 8001f36:	f043 0310 	orr.w	r3, r3, #16
 8001f3a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3738      	adds	r7, #56	@ 0x38
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	46020c00 	.word	0x46020c00

08001f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e1d9      	b.n	8002314 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f60:	4b9b      	ldr	r3, [pc, #620]	@ (80021d0 <HAL_RCC_ClockConfig+0x284>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d910      	bls.n	8001f90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6e:	4b98      	ldr	r3, [pc, #608]	@ (80021d0 <HAL_RCC_ClockConfig+0x284>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 020f 	bic.w	r2, r3, #15
 8001f76:	4996      	ldr	r1, [pc, #600]	@ (80021d0 <HAL_RCC_ClockConfig+0x284>)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7e:	4b94      	ldr	r3, [pc, #592]	@ (80021d0 <HAL_RCC_ClockConfig+0x284>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d001      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e1c1      	b.n	8002314 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d010      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	4b8c      	ldr	r3, [pc, #560]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d908      	bls.n	8001fbe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8001fac:	4b89      	ldr	r3, [pc, #548]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 8001fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	4986      	ldr	r1, [pc, #536]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d012      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	4b81      	ldr	r3, [pc, #516]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	091b      	lsrs	r3, r3, #4
 8001fd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d909      	bls.n	8001ff0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8001fdc:	4b7d      	ldr	r3, [pc, #500]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	497a      	ldr	r1, [pc, #488]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d010      	beq.n	800201e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	4b74      	ldr	r3, [pc, #464]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002008:	429a      	cmp	r2, r3
 800200a:	d908      	bls.n	800201e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800200c:	4b71      	ldr	r3, [pc, #452]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	496e      	ldr	r1, [pc, #440]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 800201a:	4313      	orrs	r3, r2
 800201c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d010      	beq.n	800204c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	4b69      	ldr	r3, [pc, #420]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	429a      	cmp	r2, r3
 8002038:	d908      	bls.n	800204c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800203a:	4b66      	ldr	r3, [pc, #408]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	f023 020f 	bic.w	r2, r3, #15
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	4963      	ldr	r1, [pc, #396]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 8002048:	4313      	orrs	r3, r2
 800204a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80d2 	beq.w	80021fe <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d143      	bne.n	80020ee <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002066:	4b5b      	ldr	r3, [pc, #364]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 8002068:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d110      	bne.n	8002096 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002074:	4b57      	ldr	r3, [pc, #348]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 8002076:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800207a:	4a56      	ldr	r2, [pc, #344]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 800207c:	f043 0304 	orr.w	r3, r3, #4
 8002080:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002084:	4b53      	ldr	r3, [pc, #332]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 8002086:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002092:	2301      	movs	r3, #1
 8002094:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8002096:	f7fe fb91 	bl	80007bc <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800209c:	4b4e      	ldr	r3, [pc, #312]	@ (80021d8 <HAL_RCC_ClockConfig+0x28c>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00f      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80020aa:	f7fe fb87 	bl	80007bc <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e12b      	b.n	8002314 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80020bc:	4b46      	ldr	r3, [pc, #280]	@ (80021d8 <HAL_RCC_ClockConfig+0x28c>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d107      	bne.n	80020de <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80020ce:	4b41      	ldr	r3, [pc, #260]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 80020d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020d4:	4a3f      	ldr	r2, [pc, #252]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 80020d6:	f023 0304 	bic.w	r3, r3, #4
 80020da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80020de:	4b3d      	ldr	r3, [pc, #244]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d121      	bne.n	800212e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e112      	b.n	8002314 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020f6:	4b37      	ldr	r3, [pc, #220]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d115      	bne.n	800212e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e106      	b.n	8002314 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800210e:	4b31      	ldr	r3, [pc, #196]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b00      	cmp	r3, #0
 8002118:	d109      	bne.n	800212e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e0fa      	b.n	8002314 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800211e:	4b2d      	ldr	r3, [pc, #180]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e0f2      	b.n	8002314 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800212e:	4b29      	ldr	r3, [pc, #164]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f023 0203 	bic.w	r2, r3, #3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	4926      	ldr	r1, [pc, #152]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 800213c:	4313      	orrs	r3, r2
 800213e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002140:	f7fe fb3c 	bl	80007bc <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b03      	cmp	r3, #3
 800214c:	d112      	bne.n	8002174 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800214e:	e00a      	b.n	8002166 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002150:	f7fe fb34 	bl	80007bc <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e0d6      	b.n	8002314 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002166:	4b1b      	ldr	r3, [pc, #108]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b0c      	cmp	r3, #12
 8002170:	d1ee      	bne.n	8002150 <HAL_RCC_ClockConfig+0x204>
 8002172:	e044      	b.n	80021fe <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d112      	bne.n	80021a2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800217c:	e00a      	b.n	8002194 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217e:	f7fe fb1d 	bl	80007bc <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e0bf      	b.n	8002314 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002194:	4b0f      	ldr	r3, [pc, #60]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b08      	cmp	r3, #8
 800219e:	d1ee      	bne.n	800217e <HAL_RCC_ClockConfig+0x232>
 80021a0:	e02d      	b.n	80021fe <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d123      	bne.n	80021f2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ac:	f7fe fb06 	bl	80007bc <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e0a8      	b.n	8002314 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80021c2:	4b04      	ldr	r3, [pc, #16]	@ (80021d4 <HAL_RCC_ClockConfig+0x288>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1ee      	bne.n	80021ac <HAL_RCC_ClockConfig+0x260>
 80021ce:	e016      	b.n	80021fe <HAL_RCC_ClockConfig+0x2b2>
 80021d0:	40022000 	.word	0x40022000
 80021d4:	46020c00 	.word	0x46020c00
 80021d8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021dc:	f7fe faee 	bl	80007bc <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e090      	b.n	8002314 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021f2:	4b4a      	ldr	r3, [pc, #296]	@ (800231c <HAL_RCC_ClockConfig+0x3d0>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d1ee      	bne.n	80021dc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d010      	beq.n	800222c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	4b43      	ldr	r3, [pc, #268]	@ (800231c <HAL_RCC_ClockConfig+0x3d0>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	429a      	cmp	r2, r3
 8002218:	d208      	bcs.n	800222c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800221a:	4b40      	ldr	r3, [pc, #256]	@ (800231c <HAL_RCC_ClockConfig+0x3d0>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	f023 020f 	bic.w	r2, r3, #15
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	493d      	ldr	r1, [pc, #244]	@ (800231c <HAL_RCC_ClockConfig+0x3d0>)
 8002228:	4313      	orrs	r3, r2
 800222a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800222c:	4b3c      	ldr	r3, [pc, #240]	@ (8002320 <HAL_RCC_ClockConfig+0x3d4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d210      	bcs.n	800225c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b39      	ldr	r3, [pc, #228]	@ (8002320 <HAL_RCC_ClockConfig+0x3d4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 020f 	bic.w	r2, r3, #15
 8002242:	4937      	ldr	r1, [pc, #220]	@ (8002320 <HAL_RCC_ClockConfig+0x3d4>)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b35      	ldr	r3, [pc, #212]	@ (8002320 <HAL_RCC_ClockConfig+0x3d4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e05b      	b.n	8002314 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d010      	beq.n	800228a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	4b2b      	ldr	r3, [pc, #172]	@ (800231c <HAL_RCC_ClockConfig+0x3d0>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002274:	429a      	cmp	r2, r3
 8002276:	d208      	bcs.n	800228a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002278:	4b28      	ldr	r3, [pc, #160]	@ (800231c <HAL_RCC_ClockConfig+0x3d0>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	4925      	ldr	r1, [pc, #148]	@ (800231c <HAL_RCC_ClockConfig+0x3d0>)
 8002286:	4313      	orrs	r3, r2
 8002288:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d012      	beq.n	80022bc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691a      	ldr	r2, [r3, #16]
 800229a:	4b20      	ldr	r3, [pc, #128]	@ (800231c <HAL_RCC_ClockConfig+0x3d0>)
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d209      	bcs.n	80022bc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80022a8:	4b1c      	ldr	r3, [pc, #112]	@ (800231c <HAL_RCC_ClockConfig+0x3d0>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	4919      	ldr	r1, [pc, #100]	@ (800231c <HAL_RCC_ClockConfig+0x3d0>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0310 	and.w	r3, r3, #16
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d010      	beq.n	80022ea <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695a      	ldr	r2, [r3, #20]
 80022cc:	4b13      	ldr	r3, [pc, #76]	@ (800231c <HAL_RCC_ClockConfig+0x3d0>)
 80022ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d208      	bcs.n	80022ea <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80022d8:	4b10      	ldr	r3, [pc, #64]	@ (800231c <HAL_RCC_ClockConfig+0x3d0>)
 80022da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	490d      	ldr	r1, [pc, #52]	@ (800231c <HAL_RCC_ClockConfig+0x3d0>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80022ea:	f000 f821 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 80022ee:	4602      	mov	r2, r0
 80022f0:	4b0a      	ldr	r3, [pc, #40]	@ (800231c <HAL_RCC_ClockConfig+0x3d0>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	490a      	ldr	r1, [pc, #40]	@ (8002324 <HAL_RCC_ClockConfig+0x3d8>)
 80022fa:	5ccb      	ldrb	r3, [r1, r3]
 80022fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002300:	4a09      	ldr	r2, [pc, #36]	@ (8002328 <HAL_RCC_ClockConfig+0x3dc>)
 8002302:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002304:	4b09      	ldr	r3, [pc, #36]	@ (800232c <HAL_RCC_ClockConfig+0x3e0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe f9cd 	bl	80006a8 <HAL_InitTick>
 800230e:	4603      	mov	r3, r0
 8002310:	73fb      	strb	r3, [r7, #15]

  return status;
 8002312:	7bfb      	ldrb	r3, [r7, #15]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	46020c00 	.word	0x46020c00
 8002320:	40022000 	.word	0x40022000
 8002324:	080026e4 	.word	0x080026e4
 8002328:	20000000 	.word	0x20000000
 800232c:	20000004 	.word	0x20000004

08002330 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002330:	b480      	push	{r7}
 8002332:	b08b      	sub	sp, #44	@ 0x2c
 8002334:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800233e:	4b78      	ldr	r3, [pc, #480]	@ (8002520 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002348:	4b75      	ldr	r3, [pc, #468]	@ (8002520 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800234a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0x34>
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	2b0c      	cmp	r3, #12
 800235c:	d121      	bne.n	80023a2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d11e      	bne.n	80023a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002364:	4b6e      	ldr	r3, [pc, #440]	@ (8002520 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d107      	bne.n	8002380 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002370:	4b6b      	ldr	r3, [pc, #428]	@ (8002520 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002372:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002376:	0b1b      	lsrs	r3, r3, #12
 8002378:	f003 030f 	and.w	r3, r3, #15
 800237c:	627b      	str	r3, [r7, #36]	@ 0x24
 800237e:	e005      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002380:	4b67      	ldr	r3, [pc, #412]	@ (8002520 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	0f1b      	lsrs	r3, r3, #28
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800238c:	4a65      	ldr	r2, [pc, #404]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800238e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d110      	bne.n	80023be <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800239c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80023a0:	e00d      	b.n	80023be <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002520 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 030c 	and.w	r3, r3, #12
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d102      	bne.n	80023b4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023ae:	4b5e      	ldr	r3, [pc, #376]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80023b0:	623b      	str	r3, [r7, #32]
 80023b2:	e004      	b.n	80023be <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d101      	bne.n	80023be <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80023bc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	2b0c      	cmp	r3, #12
 80023c2:	f040 80a5 	bne.w	8002510 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80023c6:	4b56      	ldr	r3, [pc, #344]	@ (8002520 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80023c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80023d0:	4b53      	ldr	r3, [pc, #332]	@ (8002520 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80023d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	3301      	adds	r3, #1
 80023dc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80023de:	4b50      	ldr	r3, [pc, #320]	@ (8002520 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80023e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e2:	091b      	lsrs	r3, r3, #4
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80023ea:	4b4d      	ldr	r3, [pc, #308]	@ (8002520 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80023ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ee:	08db      	lsrs	r3, r3, #3
 80023f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	fb02 f303 	mul.w	r3, r2, r3
 80023fa:	ee07 3a90 	vmov	s15, r3
 80023fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002402:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d003      	beq.n	8002414 <HAL_RCC_GetSysClockFreq+0xe4>
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d022      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0x128>
 8002412:	e043      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	ee07 3a90 	vmov	s15, r3
 800241a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800241e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800252c <HAL_RCC_GetSysClockFreq+0x1fc>
 8002422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002426:	4b3e      	ldr	r3, [pc, #248]	@ (8002520 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800242a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800242e:	ee07 3a90 	vmov	s15, r3
 8002432:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002436:	ed97 6a01 	vldr	s12, [r7, #4]
 800243a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8002530 <HAL_RCC_GetSysClockFreq+0x200>
 800243e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002442:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002446:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800244a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800244e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002452:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002456:	e046      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002462:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800252c <HAL_RCC_GetSysClockFreq+0x1fc>
 8002466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800246a:	4b2d      	ldr	r3, [pc, #180]	@ (8002520 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800246c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800246e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002472:	ee07 3a90 	vmov	s15, r3
 8002476:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800247a:	ed97 6a01 	vldr	s12, [r7, #4]
 800247e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8002530 <HAL_RCC_GetSysClockFreq+0x200>
 8002482:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002486:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800248a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800248e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002496:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800249a:	e024      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	ee07 3a90 	vmov	s15, r3
 80024ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002520 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80024b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024bc:	ee07 3a90 	vmov	s15, r3
 80024c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80024c4:	ed97 6a01 	vldr	s12, [r7, #4]
 80024c8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8002530 <HAL_RCC_GetSysClockFreq+0x200>
 80024cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80024d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024e4:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80024e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002520 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80024e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ea:	0e1b      	lsrs	r3, r3, #24
 80024ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024f0:	3301      	adds	r3, #1
 80024f2:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	ee07 3a90 	vmov	s15, r3
 80024fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8002502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800250a:	ee17 3a90 	vmov	r3, s15
 800250e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8002510:	6a3b      	ldr	r3, [r7, #32]
}
 8002512:	4618      	mov	r0, r3
 8002514:	372c      	adds	r7, #44	@ 0x2c
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	46020c00 	.word	0x46020c00
 8002524:	080026f4 	.word	0x080026f4
 8002528:	00f42400 	.word	0x00f42400
 800252c:	4b742400 	.word	0x4b742400
 8002530:	46000000 	.word	0x46000000

08002534 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002538:	f7ff fefa 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 800253c:	4602      	mov	r2, r0
 800253e:	4b07      	ldr	r3, [pc, #28]	@ (800255c <HAL_RCC_GetHCLKFreq+0x28>)
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	4906      	ldr	r1, [pc, #24]	@ (8002560 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002548:	5ccb      	ldrb	r3, [r1, r3]
 800254a:	fa22 f303 	lsr.w	r3, r2, r3
 800254e:	4a05      	ldr	r2, [pc, #20]	@ (8002564 <HAL_RCC_GetHCLKFreq+0x30>)
 8002550:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002552:	4b04      	ldr	r3, [pc, #16]	@ (8002564 <HAL_RCC_GetHCLKFreq+0x30>)
 8002554:	681b      	ldr	r3, [r3, #0]
}
 8002556:	4618      	mov	r0, r3
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	46020c00 	.word	0x46020c00
 8002560:	080026e4 	.word	0x080026e4
 8002564:	20000000 	.word	0x20000000

08002568 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002570:	4b3e      	ldr	r3, [pc, #248]	@ (800266c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800257e:	f7fe fdeb 	bl	8001158 <HAL_PWREx_GetVoltageRange>
 8002582:	6178      	str	r0, [r7, #20]
 8002584:	e019      	b.n	80025ba <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	4b39      	ldr	r3, [pc, #228]	@ (800266c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002588:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800258c:	4a37      	ldr	r2, [pc, #220]	@ (800266c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800258e:	f043 0304 	orr.w	r3, r3, #4
 8002592:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002596:	4b35      	ldr	r3, [pc, #212]	@ (800266c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025a4:	f7fe fdd8 	bl	8001158 <HAL_PWREx_GetVoltageRange>
 80025a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025aa:	4b30      	ldr	r3, [pc, #192]	@ (800266c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80025ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025b0:	4a2e      	ldr	r2, [pc, #184]	@ (800266c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80025b2:	f023 0304 	bic.w	r3, r3, #4
 80025b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80025c0:	d003      	beq.n	80025ca <RCC_SetFlashLatencyFromMSIRange+0x62>
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025c8:	d109      	bne.n	80025de <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025d0:	d202      	bcs.n	80025d8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80025d2:	2301      	movs	r3, #1
 80025d4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80025d6:	e033      	b.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80025d8:	2300      	movs	r3, #0
 80025da:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80025dc:	e030      	b.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025e4:	d208      	bcs.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ec:	d102      	bne.n	80025f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80025ee:	2303      	movs	r3, #3
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	e025      	b.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e035      	b.n	8002664 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025fe:	d90f      	bls.n	8002620 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d109      	bne.n	800261a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800260c:	d902      	bls.n	8002614 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	e015      	b.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002614:	2301      	movs	r3, #1
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	e012      	b.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800261a:	2300      	movs	r3, #0
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	e00f      	b.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002626:	d109      	bne.n	800263c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800262e:	d102      	bne.n	8002636 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002630:	2301      	movs	r3, #1
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	e004      	b.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002636:	2302      	movs	r3, #2
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	e001      	b.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800263c:	2301      	movs	r3, #1
 800263e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002640:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f023 020f 	bic.w	r2, r3, #15
 8002648:	4909      	ldr	r1, [pc, #36]	@ (8002670 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002650:	4b07      	ldr	r3, [pc, #28]	@ (8002670 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 030f 	and.w	r3, r3, #15
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	429a      	cmp	r2, r3
 800265c:	d001      	beq.n	8002662 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	46020c00 	.word	0x46020c00
 8002670:	40022000 	.word	0x40022000

08002674 <memset>:
 8002674:	4402      	add	r2, r0
 8002676:	4603      	mov	r3, r0
 8002678:	4293      	cmp	r3, r2
 800267a:	d100      	bne.n	800267e <memset+0xa>
 800267c:	4770      	bx	lr
 800267e:	f803 1b01 	strb.w	r1, [r3], #1
 8002682:	e7f9      	b.n	8002678 <memset+0x4>

08002684 <__libc_init_array>:
 8002684:	b570      	push	{r4, r5, r6, lr}
 8002686:	4d0d      	ldr	r5, [pc, #52]	@ (80026bc <__libc_init_array+0x38>)
 8002688:	2600      	movs	r6, #0
 800268a:	4c0d      	ldr	r4, [pc, #52]	@ (80026c0 <__libc_init_array+0x3c>)
 800268c:	1b64      	subs	r4, r4, r5
 800268e:	10a4      	asrs	r4, r4, #2
 8002690:	42a6      	cmp	r6, r4
 8002692:	d109      	bne.n	80026a8 <__libc_init_array+0x24>
 8002694:	4d0b      	ldr	r5, [pc, #44]	@ (80026c4 <__libc_init_array+0x40>)
 8002696:	2600      	movs	r6, #0
 8002698:	4c0b      	ldr	r4, [pc, #44]	@ (80026c8 <__libc_init_array+0x44>)
 800269a:	f000 f817 	bl	80026cc <_init>
 800269e:	1b64      	subs	r4, r4, r5
 80026a0:	10a4      	asrs	r4, r4, #2
 80026a2:	42a6      	cmp	r6, r4
 80026a4:	d105      	bne.n	80026b2 <__libc_init_array+0x2e>
 80026a6:	bd70      	pop	{r4, r5, r6, pc}
 80026a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ac:	3601      	adds	r6, #1
 80026ae:	4798      	blx	r3
 80026b0:	e7ee      	b.n	8002690 <__libc_init_array+0xc>
 80026b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026b6:	3601      	adds	r6, #1
 80026b8:	4798      	blx	r3
 80026ba:	e7f2      	b.n	80026a2 <__libc_init_array+0x1e>
 80026bc:	080027b4 	.word	0x080027b4
 80026c0:	080027b4 	.word	0x080027b4
 80026c4:	080027b4 	.word	0x080027b4
 80026c8:	080027b8 	.word	0x080027b8

080026cc <_init>:
 80026cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ce:	bf00      	nop
 80026d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026d2:	bc08      	pop	{r3}
 80026d4:	469e      	mov	lr, r3
 80026d6:	4770      	bx	lr

080026d8 <_fini>:
 80026d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026da:	bf00      	nop
 80026dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026de:	bc08      	pop	{r3}
 80026e0:	469e      	mov	lr, r3
 80026e2:	4770      	bx	lr
